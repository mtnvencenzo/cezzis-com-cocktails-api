variables:
  serviceConnectionName: 'sc-vec-eus-default-svc-principal-001'
  terraformStateResourceGroup: 'rg-vec-eus-administration-001'
  terraformStateStorageAccount: 'stveceusterraformstat001'
  terraformStateContainerName: 'terraform-cocktails'
  containerRegistry: 'appr-vec-devops-project-latest-acr'
  imageRepositoryApi: 'cocktailsapi'
  dockerFileName: 'Dockerfile-CI'
  coverageArtifact: 'cocktails.api.codecoverage'
  buildArtifact: 'cocktails.api.build'
  buildConfiguration: 'Release'
  tag: '$(Build.SourceVersion)'

  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    branchType: main
  ${{ if ne(variables['Build.SourceBranchName'], 'main') }}: 
    branchType: pr

name: $(Build.DefinitionName)_$(branchType)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - cocktails.api/*

pool:
  vmImage: ubuntu-latest

stages:

##########################
### PREPARE BUILD
##########################
  - stage: PrepareBuild
    displayName: 'Prepare for build and test'
    jobs:
    - job: ApplyBuildTags
      displayName: 'Apply tags'
      steps:
      - script: |
          echo "##vso[build.addbuildtag]$(branchType)"
          echo "##vso[build.addbuildtag]cockails"
          echo "##vso[build.addbuildtag]api"
        displayName: 'Apply tags'

      - download: none
      - checkout: none  #skip loading source in this job (not needed)
      
    - template: ./list-file-changes.yml
      parameters:
        name: ListFilesChanges
        display: 'List file changes'
        rootDirectory: 'cocktails.api'

##########################
### BUILD
##########################
  - stage: Build
    displayName: 'Build and test'
    dependsOn: PrepareBuild
    jobs:
    - job: BuildApi
      displayName: 'Build and test api'
      condition: not(or(failed(), canceled()))
      steps:
        - template: api-build.yml
          parameters:
            branchType: ${{ variables.branchType }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/cocktails.api'
            buildArtifactName: ${{ variables.buildArtifact }}
            dockerFileName: ${{ variables.dockerFileName }}
            buildConfiguration: ${{ variables.buildConfiguration }}
            coverageArtifactName: ${{ variables.coverageArtifact }}

    - deployment: DockerApi
      dependsOn:
        - BuildApi
      displayName: 'Docker build and push api'
      environment: dev
      timeoutInMinutes: 10

      pool:
        vmImage: ubuntu-latest

      strategy:
        runOnce:
          deploy:
            steps:
            - template: docker-build-push.yml
              parameters:
                containerRegistry: $(containerRegistry)
                imageRepository: $(imageRepositoryApi)
                tag: $(tag)
                artifactName: ${{ variables.buildArtifact }}
                displayName: 'Docker build and push api'
                branchType: ${{ variables.branchType }}
                dockerFileName: ${{ variables.dockerFileName }}

##########################
### DEPLOY PRD
##########################

  - stage: DeployPrd
    displayName: 'Deploy to production'
    dependsOn:
      - PrepareBuild
      - Build

    variables:
      keyVaultName: 'kv-vec-eus-prd-cockti-1'
      globalKeyVaultName: 'kv-vec-eus-glo-cockti-1'
      terraformStateBlobKey: 'cocktails/prd-cocktails-api.tfstate'

    jobs:
    - deployment: Terraform
      displayName: 'Terraform plan and apply'
      environment: prd
      timeoutInMinutes: 360
      
      pool:
        vmImage: ubuntu-latest

      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureKeyVault@2
              displayName: 'KeyVault Get B2c Terraform Client Id'
              inputs:
                azureSubscription: ${{ variables.serviceConnectionName }}
                keyVaultName: ${{ variables.globalKeyVaultName}}
                secretsFilter: 'prd-b2c-terraform-app-registration-client-id'

            - task: AzureKeyVault@2
              displayName: 'KeyVault Get B2c Terraform Client Secret'
              inputs:
                azureSubscription: ${{ variables.serviceConnectionName }}
                keyVaultName: ${{ variables.globalKeyVaultName}}
                secretsFilter: 'prd-b2c-terraform-app-registration-client-secret'

            - template: terraform-plan-and-apply.yml
              parameters:
                env: prd
                image_tag: $(tag)
                branchType: ${{ variables.branchType }}
                workingDirectory: '$(System.DefaultWorkingDirectory)/cocktails.api/.terraform'
                serviceConnectionName: '$(serviceConnectionName)'
                terraformStateResourceGroup: '$(terraformStateResourceGroup)'
                terraformStateStorageAccount: '$(terraformStateStorageAccount)'
                terraformStateContainerName: '$(terraformStateContainerName)'
                terraformStateBlobKey: '$(terraformStateBlobKey)'
                b2cTerraformAppRegistrationClientId: '$(prd-b2c-terraform-app-registration-client-id)'
                b2cTerraformAppRegistrationClientSecret: '$(prd-b2c-terraform-app-registration-client-secret)'

    - job: InitializeApi
      displayName: 'Initialize api'
      dependsOn: Terraform

      variables:
      - name: warmUpUrl
        value: https://apim-vec-eus-glo-shared-001.azure-api.net/prd/cocktails/api/v1/health/ping
      - name: seedCocktailsUrl
        value: https://apim-vec-eus-glo-shared-001.azure-api.net/prd/cocktails/api/v1/cocktails
      - name: seedIngredientsUrl
        value: https://apim-vec-eus-glo-shared-001.azure-api.net/prd/cocktails/api/v1/cocktails/ingredients

      steps:
        - task: AzureKeyVault@2
          displayName: 'Load keyvault secrets'
          condition: and(not(or(failed(), canceled())), eq('${{ variables.branchType }}', 'main'))
          inputs:
            azureSubscription: ${{ variables.serviceConnectionName }}
            keyVaultName: ${{ variables.keyVaultName}}
            secretsFilter: 'cocktails-api-devops-subscription-primary-key'

        - script: |
            echo '============= warming up ================================'
            echo "GET $(warmUpUrl)"
            echo '========================================================='

            max_retries=5
            retry_count=0

            while [ $retry_count -lt $max_retries ]; do

              if [ 'X-Key' != '' ]; then
                rs=$(curl -H "X-Key: $(cocktails-api-devops-subscription-primary-key)" --write-out '%{http_code}' --silent -m 30 --output /dev/null $(warmUpUrl))
              else
                rs=$(curl --write-out '%{http_code}' --silent -m 30 --output /dev/null $(warmUpUrl))
              fi

              if [ $rs -eq 200 ]; then
                echo "Request was successful with status code $rs"
                exit 0
              else
                echo "Request failed with status code $rs. Retrying..."
                retry_count=$((retry_count + 1))
                sleep 2 # Wait for 2 seconds before retrying
              fi
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Request failed after $max_retries retries. Exiting."
            fi

            exit -1

          name: WarmingUp
          displayName: "Sending warmup request"
          condition: and(not(or(failed(), canceled())), eq('${{ variables.branchType }}', 'main'))

        - script: |
            echo '========================================================='
            echo "PUT $(seedIngredientsUrl)"
            echo '========================================================='

            max_retries=1
            retry_count=0

            while [ $retry_count -lt $max_retries ]; do

              if [ 'X-Key' != '' ]; then
                rs=$(curl -X PUT -H "X-Key: $(cocktails-api-devops-subscription-primary-key)" --write-out '%{http_code}' --silent -m 60 --output /dev/null $(seedIngredientsUrl))
              else
                rs=$(curl -X PUT --write-out '%{http_code}' --silent -m 60 --output /dev/null $(seedIngredientsUrl))
              fi

              if [ $rs -eq 204 ]; then
                echo "Request was successful with status code $rs"
                exit 0
              else
                echo "Request failed with status code $rs. Retrying..."
                retry_count=$((retry_count + 1))
                sleep 2 # Wait for 2 seconds before retrying
              fi
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Request failed after $max_retries retries. Exiting."
            fi

            exit -1

          name: SeedingIngredients
          displayName: "Seed ingredients data"
          condition: and(not(or(failed(), canceled())), eq('${{ variables.branchType }}', 'main'))

        - script: |
            echo '========================================================='
            echo "PUT $(seedCocktailsUrl)"
            echo '========================================================='

            max_retries=1
            retry_count=0

            while [ $retry_count -lt $max_retries ]; do

              if [ 'X-Key' != '' ]; then
                rs=$(curl -X PUT -H "X-Key: $(cocktails-api-devops-subscription-primary-key)" --write-out '%{http_code}' --silent -m 60 --output /dev/null $(seedCocktailsUrl))
              else
                rs=$(curl -X PUT --write-out '%{http_code}' --silent -m 60 --output /dev/null $(seedCocktailsUrl))
              fi

              if [ $rs -eq 204 ]; then
                echo "Request was successful with status code $rs"
                exit 0
              else
                echo "Request failed with status code $rs. Retrying..."
                retry_count=$((retry_count + 1))
                sleep 2 # Wait for 2 seconds before retrying
              fi
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Request failed after $max_retries retries. Exiting."
            fi

            exit -1

          name: SeedingCocktails
          displayName: "Seed cocktails data"
          condition: and(not(or(failed(), canceled())), eq('${{ variables.branchType }}', 'main'))

          