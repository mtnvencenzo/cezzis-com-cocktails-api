parameters:
- name: workingDirectory  # $(System.DefaultWorkingDiretory)/cocktails.api
  type: string
- name: buildArtifactName
  type: string
- name: branchType
  type: string
- name: dockerFileName
  type: string
- name: buildConfiguration
  type: string
- name: coverageArtifactName
  type: string

steps:
  - task: UseDotNet@2
    displayName: 'Use NetCore 9.0.x'
    inputs:
      packageType: 'sdk'
      version: '9.0.x'

  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      projects: '${{ parameters.workingDirectory }}/Cocktails.Api.sln'
      feedsToUse: 'config'
      nugetConfigPath: './Nuget.Config'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '${{ parameters.workingDirectory }}/Cocktails.Api.sln'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '${{ parameters.workingDirectory }}/test/**/*.[Uu]nit.[Tt]ests/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --collect:"XPlat Code Coverage" -v:q -l:"console;verbosity=normal" --no-build'
      publishTestResults: true
      testRunTitle: 'Cocktails.Api'

  - task: reportgenerator@5
    displayName: 'Generate Code Coverage'
    inputs:
      reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      targetdir: '${{ parameters.workingDirectory }}/CodeCoverage'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      publishCodeCoverageResults: false

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '${{ parameters.workingDirectory }}/CodeCoverage/Cobertura.xml'
      reportDirectory: '${{ parameters.workingDirectory }}/CodeCoverage'
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'

  - task: DotNetCoreCLI@2
    displayName: Publish Api
    inputs:
      command: publish
      publishWebProjects: false
      projects: ${{ parameters.workingDirectory }}/src/Cocktails.Api/Cocktails.Api.csproj
      arguments: '-c ${{ parameters.buildConfiguration }} -o $(Build.ArtifactStagingDirectory)/api/publish  --no-restore'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: CopyFiles@2
    displayName: 'Api copy docker file'
    inputs:
      SourceFolder: '${{ parameters.workingDirectory }}/src/Cocktails.Api'
      Contents: '${{ parameters.dockerFileName }}'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/api'
      OverWrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Api publish artifact'
    condition: and(not(or(failed(), canceled())), eq('${{ parameters.branchType }}', 'main'))
    inputs:
      PathToPublish: '$(Build.ArtifactStagingDirectory)/api'
      ArtifactName: '${{ parameters.buildArtifactName }}'
